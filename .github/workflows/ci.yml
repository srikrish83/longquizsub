name: CI Pipeline

on:
  push:
    branches:
      - main  # Runs on every push to main branch

jobs:
  # ðŸ”¥ Step 1: Run Tests First
  run_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Dependencies
        working-directory: build_bikesharing/Application
        run: |
          pip install --upgrade pip
          pip install -e .[dev]  # Install package in editable mode with dev dependencies
          pip install pyyaml scikit-learn pytest build pandas 

      - name: Run Tests
        working-directory: build_bikesharing/Application
        run: pytest tests/

  # ðŸ”¥ Step 2: Train, Build & Test (Runs Only If Step 1 Passes)
  train_build_test:
    runs-on: ubuntu-latest
    needs: run_tests
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Dependencies
        working-directory: build_bikesharing/Application
        run: |
          pip install --upgrade pip setuptools wheel build pyyaml scikit-learn pytest build pandas

      - name: Verify MANIFEST.in Files Before Build
        working-directory: build_bikesharing/Application
        run: |
          ls -la
          cat MANIFEST.in

      - name: Train Model
        working-directory: build_bikesharing/Application/bikeshare_model
        run: |
          echo "Starting model training..."
          python train_pipeline.py
          echo "Training completed successfully"

      - name: Build Package
        working-directory: build_bikesharing/Application
        run: |
          echo "Cleaning previous builds..."
          rm -rf dist/ build/
          
          echo "Building package..."
          python -m build --sdist --wheel
          echo "Package built successfully"

      - name: Run Tests
        working-directory: build_bikesharing/Application
        run: |
          echo "Running tests..."
          pytest tests/
          echo "Tests completed successfully"
      - name: Upload Built Package as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-package
          path: build_bikesharing/Application/dist/

      - name: Check Built Package Contents
        working-directory: build_bikesharing/Application
        run: |
          ls -la dist/
          tar -tf dist/*.tar.gz  
          unzip -l dist/*.whl    

  # ðŸ”¥ Step 3: Build and Push Docker Image (Runs Only If Build Passes)
  build_docker:
    runs-on: ubuntu-latest
    needs: train_build_test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Built Package
        uses: actions/download-artifact@v4
        with:
          name: built-package
          path: build_bikesharing/bike_sharing_api/

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Build and Push Docker Image
        working-directory: build_bikesharing
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -t ${{ secrets.DOCKER_USERNAME }}/bike_sharing_api:latest \
            --push .